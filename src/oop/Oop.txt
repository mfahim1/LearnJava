OOP: Object oriented programming

Class
Object
Association
Aggregation
Composition

4 Object Oriented Programming
Abstractions
Encapsulation
Polymorphism
Inheritance

========================================================================================================================
#Abstractions: implementation hiding
Interface - guideline for future, roadmap. Keep functionalities for future use. A blueprint of a class, it has static constants, and abstract methods.
//Interface is a mechanism to obtain abstraction
Abstract class -

//Interface:
    //In an interface, you can't instantiate variable and create an object.
    //The interface cannot contain concrete(with implementation) methods
    //In Interface only one specifier is used- Public

//A Java class can implement multiple Java Interfaces. It is necessary that the class must implement all the
//Class should override all the abstract methods declared in the interface
//The interface allows sending a message to an object without concerning which classes it belongs
//Class needs to provide functionality for the method declared in the interface
//All methods in an interface are implicitly public and abstract
//An interface cannot be instantiated
//An interface reference can point to objects of its implementing classes
//An interface can extend from one or many interfaces. Class can extend only one class but implement any number
//An interface cannot implement another Interface. It has to extend another interface if needed.
//An interface which is declared inside another interface is referred to as nested interface
//At the time of declaration, interface variable must be initialized. Otherwise, the compiler will throw an exception
//The class cannot implement two interfaces in java that have methods with the same name but different return type

//When to use Interface and Abstract Class?
//Use an abstract class when a template needs to be defined for a group of subclasses
//Use an interface when a role needs to be defined for other classes, regardless of the inheritance tree of these classes
========================================================================================================================
#Encapsulation: Data hiding

-Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit
-In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class
-Therefore, it is also known as data hiding.

To achieve encapsulation in Java:
- Declare the variables of a class as private
- Provide public setter and getter methods to modify and view the variables values

========================================================================================================================

#Inheritance:

Grandfater = Super(parent) class
Father is a sub(child) class of Grandfather
Son is a sub(child) class of Father

This example provided here is a multiple inheritance example.

Son -> Father -> Grandfather

Son will inherit all the "public" variables and methods from Father and Grandfather class

You can add more sub classes that extends from Grandfather class and have a "hierarchical inheritance"

ex:
Father, FatherTwo, FatherThree can all extend from Grandfather

There are many types of inheritances in Java:
- Single Level (ex: Class B inherits from Class A)
- Multi Level (ex: Class C inherits from Class B, and Class B inherits from Class A)
- Hierarchical level (ex: Class B and C both inherit from Class A)

Java does NOT Support multiple inheritance as it causes ambiguity
(ex: Class C cannot inherit from both Class A and Class B)
========================================================================================================================
#Polymorphism:

- Polymorphism in Java is a concept by which we can perform a single action in different ways
- Polymorphism is derived from 2 Greek words: poly and morphs
- The word "poly" means many and "morphs" means forms so polymorphism means many forms
- It occurs when we have many classes that are related to each other by inheritance

There are two types of polymorphism in Java:
1. compile-time polymorphism/ (method overloading)/ Static binding
2. runtime polymorphism/ (method overriding)/ Dynamic binding

We can perform polymorphism in java by method overloading and method overriding. 